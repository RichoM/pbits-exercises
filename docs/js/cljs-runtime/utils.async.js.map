{"version":3,"sources":["utils/async.cljc"],"mappings":"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","names":["utils.async/chan->promise","ch","js/Promise","res","rej","p1__80023#","cljs.core.async.take_BANG_","js/Error","utils.async/reduce-until-timeout!","f","init","t","c__11263__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__11264__auto__","switch__11178__auto__","state_80053","state_val_80054","inst_80024","inst_80025","statearr-80055","statearr-80056","inst_80030","cljs.core/PersistentVector","inst_80035","inst_80036","state_80033","state_val_80034","inst_80031","cljs.core.async.impl.ioc-helpers/return-chan","statearr-80057","state-machine__11179__auto__","ret-value__11180__auto__","result__11181__auto__","cljs.core/keyword-identical?","ex__11182__auto__","e80058","statearr-80059","cljs.core/seq","statearr-80060","cljs.core/first","state__11265__auto__","statearr-80061","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","inst_80037","inst_80038","inst_80039","statearr-80062","cljs.core.async/ioc-alts!","inst_80051","inst_80042","inst_80041","cljs.core.nth","inst_80043","statearr-80063","statearr-80064","statearr-80065","inst_80045","statearr-80066","statearr-80067","statearr-80068","inst_80049","statearr-80069","statearr-80070","e80071","statearr-80072","statearr-80073","statearr-80074","ret","cljs.core.async/poll!","utils.async/throw-err","e"],"sourcesContent":["(ns utils.async\r\n  (:require [clojure.core.async :as a :refer [go]])\r\n  #?(:cljs (:require-macros [utils.async])))\r\n\r\n#?(:cljs\r\n   (defn chan->promise [ch]\r\n     \"Returns a javascript promise that will either resolve to the first available\r\n     value taken from ch or reject if the value was an error\"\r\n     (js/Promise. (fn [res rej]\r\n                    (a/take! ch #(if (instance? js/Error %)\r\n                                   (rej %)\r\n                                   (res %)))))))\r\n\r\n(defn reduce-until-timeout!\r\n  \"Take from channel ch while data is available (without blocking/parking) until\r\n   the timeout is closed or no more data is immediately available.\r\n   Results are accumulated using the reducer function f and the initial value init.\"\r\n  [f init ch t]\r\n  (go (loop [ret init]\r\n        (let [[val _] (a/alts! [t (go (a/poll! ch))])]\r\n          (if val\r\n            (recur (f ret val))\r\n            ret)))))\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\r\n; NOTE(Richo): The following code comes from Alexander Kiel's library async-error\r\n; (https://github.com/alexanderkiel/async-error).\r\n; I decided to include the source code here instead of as a dependency because I\r\n; wanted to change it slightly in order to handle throwing any object in cljs.\r\n\r\n;; ---- Helpers Taken from Prismatic Schema -----------------------------------\r\n\r\n#?(:clj\r\n   (defn cljs-env?\r\n     \"Take the &env from a macro, and tell whether we are expanding into cljs.\"\r\n     [env]\r\n     (boolean (:ns env))))\r\n\r\n#?(:clj\r\n   (defmacro if-cljs\r\n     \"Return then if we are generating cljs code and else for Clojure code.\r\n      https://groups.google.com/d/msg/clojurescript/iBY5HaQda4A/w1lAQi9_AwsJ\"\r\n     [then else]\r\n     (if (cljs-env? &env) then else)))\r\n\r\n;; ---- Helpers ---------------------------------------------------------------\r\n\r\n(defn throw-err [e]\r\n  (when (instance? #?(:clj Throwable :cljs js/Error) e) (throw e))\r\n  e)\r\n\r\n;; ---- Public API ------------------------------------------------------------\r\n\r\n#?(:clj\r\n   (defmacro <?\r\n     \"Like <! but throws errors.\"\r\n     [ch]\r\n     `(if-cljs\r\n       (throw-err (cljs.core.async/<! ~ch))\r\n       (throw-err (clojure.core.async/<! ~ch)))))\r\n\r\n#?(:clj\r\n   (defn <??\r\n     \"Like <!! but throws errors.\"\r\n     [ch]\r\n     (throw-err (clojure.core.async/<!! ch))))\r\n\r\n#?(:clj\r\n   (defmacro go-try\r\n     \"Like go but catches the first thrown error and returns it.\"\r\n     [& body]\r\n     `(if-cljs\r\n       (cljs.core.async/go\r\n         (try\r\n           ~@body\r\n           (catch :default e#\r\n             (if (instance? js/Error e#)\r\n               e#\r\n               (js/Error. \"ERROR\" (cljs.core/js-obj \"cause\" e#))))))\r\n       (clojure.core.async/go\r\n         (try\r\n           ~@body\r\n           (catch Throwable t# t#))))))\r\n"]}