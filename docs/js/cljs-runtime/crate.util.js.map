{"version":3,"sources":["crate/util.cljs"],"mappings":"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","names":["crate.util/*base-url*","var_args","G__23923","crate.util/as-str","args-arr__5794__auto__","len__5769__auto__","i__5770__auto__","argseq__5795__auto__","cljs.core/IndexedSeq","seq23921","G__23922","cljs.core/first","cljs.core/next","self__5754__auto__","x","cljs.core/Symbol","cljs.core/Keyword","cljs.core/name","xs","s","more","crate.util.as_str","crate.util/escape-html","text","clojure.string/replace","crate.util/to-uri","uri","cljs.core/re-matches","crate.util/url-encode-component","js/encodeURIComponent","crate.util/url-encode","params","clojure.string.join","iter__5523__auto__","s__23932","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__23934","cljs.core/chunk-buffer","i__23933","vec__23938","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__23931","cljs.core/chunk-rest","vec__23947","cljs.core/cons","cljs.core/rest","k","v","args__5775__auto__","argseq__5776__auto__","crate.util/url","seq23950","self__5755__auto__","args","cljs.core/last","cljs.core/butlast","cljs.core.apply","cljs.core/str","cljs.core/map?","cljs.core/chunk-first"],"sourcesContent":["(ns crate.util\n  (:require [clojure.string :as str]))\n\n(def ^:dynamic *base-url* nil)\n\n(defn as-str\n  ([] \"\")\n  ([x]\n    ; TODO: Maybe use something like (satisfies? INamed x) instead?\n    (if (or (symbol? x) (keyword? x))\n      (name x)\n      (str x)))\n  ([x & xs]\n    ((fn [s more]\n       (if more\n         (recur (str s (as-str (first more))) (next more))\n         s))\n     (as-str x) xs)))\n\n(defn escape-html\n  \"Change special characters into HTML character entities.\"\n  [text]\n  (-> (as-str text)\n    (str/replace \"&\"  \"&amp;\")\n    (str/replace \"<\"  \"&lt;\")\n    (str/replace \">\"  \"&gt;\")\n    (str/replace \"\\\"\" \"&quot;\")))\n\n(defn to-uri\n  \"Prepends the base-url to the supplied URI.\"\n  [uri]\n  (if (re-matches #\"^\\w+:.*\" uri)\n    uri\n    (str *base-url* uri)))\n\n(defn url-encode-component [s]\n  \"urlencode\"\n  (js/encodeURIComponent (as-str s)))\n\n(defn url-encode\n  \"Turn a map of parameters into a urlencoded string.\"\n  [params]\n  (str/join \"&\"\n    (for [[k v] params]\n      (str (url-encode-component k) \"=\" (url-encode-component v)))))\n\n(defn url\n  \"Creates a URL string from a variable list of arguments and an optional\n  parameter map as the last argument. For example:\n    (url \\\"/group/\\\" 4 \\\"/products\\\" {:page 9})\n    => \\\"/group/4/products?page=9\\\"\"\n  [& args]\n  (let [params (last args)\n        args   (butlast args)]\n    (str\n      (to-uri\n        (str (apply str args)\n             (if (map? params)\n               (str \"?\" (url-encode params))\n               params))))))\n"]}