{"version":3,"sources":["crate/compiler.cljs"],"mappings":"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","names":["crate.compiler/xmlns","crate.compiler/group-id","cljs.core.atom","crate.compiler/bindings","crate.compiler/capture-binding","tag","b","cljs.core.swap_BANG_","cljs.core/conj","crate$compiler$Element$_elem$dyn","x__5393__auto__","m__5394__auto__","crate.compiler/-elem","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","crate.compiler/Element","this","crate.compiler/as-content","parent","content","seq__24079","cljs.core/seq","chunk__24080","count__24081","i__24082","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","c","child","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/map?","goog.dom/createTextNode","cljs.core/vector?","crate.compiler/elem-factory","cljs.core/seq?","crate.binding/binding-coll?","G__24142","G__24143","G__24147","G__24148","crate.binding/value","crate.binding/binding?","G__24144","G__24145","G__24149","G__24150","goog.dom/appendChild","js/crate","js/crate.compiler","js/crate.compiler.dom-binding","method-table__5642__auto__","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__24154","cljs.core/MultiFn","cljs.core.symbol","crate.compiler/dom-binding","type","_","elem","crate.binding/on-change","v","goog.dom/removeChildren","p__24180","vec__24181","cljs.core.nth","k","crate.compiler/dom-attr","p__24195","vec__24196","crate.compiler/dom-style","crate.compiler/dom-add","bc","temp__5802__auto__","adder","crate.binding/opt","crate.compiler/dom-remove","remover","goog.dom/removeNode","pred__24205","expr__24206","js/Error","cljs.core/=","crate.compiler/handle-bindings","bs","seq__24208","chunk__24209","count__24210","i__24211","vec__24218","vec__24221","var_args","G__24225","seq__24226","chunk__24227","count__24228","i__24229","vec__24236","vec__24239","crate.compiler.dom_style","goog.style/setStyle","cljs.core/name","G__24243","attrs","seq__24244","chunk__24245","count__24246","i__24247","vec__24254","vec__24257","crate.compiler.dom_attr","cljs.core._EQ_","crate.compiler/re-tag","crate.compiler/normalize-map-attrs","map-attrs","cljs.core.into","cljs.core.map","p__24260","vec__24261","n","cljs.core.filter","cljs.core.comp","cljs.core/boolean","cljs.core/second","p__24265","vec__24266","seq__24267","first__24268","crate.compiler/normalize-element","cljs.core/Keyword","cljs.core/Symbol","vec__24269","vec__24272","id","class","cljs.core/re-matches","nsp","vec__24275","t","clojure.string.split","ns-xmlns","G__24278","cljs.core.keyword","or__5045__auto__","tag-attrs","p1__24264#","clojure.string/replace","cljs.core.merge","crate.compiler/parse-content","cljs.core/rest","crate.compiler/create-elem","js/document","tag-def","bindings-orig-val__24279","bindings-temp-val__24280","vec__24281","cljs.core/deref","crate.compiler/add-optional-attrs","func","args","vec__24284","seq__24285","first__24286","body","cljs.core.apply","cljs.core/vector"],"sourcesContent":["(ns crate.compiler\n  (:require [goog.dom :as gdom]\n            [goog.style :as gstyle]\n            [clojure.string :as string]\n            [crate.binding :as bind]))\n\n(def xmlns {:xhtml \"http://www.w3.org/1999/xhtml\"\n            :svg \"http://www.w3.org/2000/svg\"})\n\n;; ********************************************\n;; Element creation via Hiccup-like vectors\n;; ********************************************\n\n(declare elem-factory dom-attr dom-style)\n(def group-id (atom 0))\n\n\n;; ********************************************\n;; Data binding\n;; ********************************************\n\n(def ^:dynamic bindings (atom []))\n\n(defn capture-binding [tag b]\n  (swap! bindings conj [tag b]))\n\n(defprotocol Element\n  (-elem [this]))\n\n(defn as-content [parent content]\n  (doseq[c content]\n    (let [child (cond\n                 \t(satisfies? Element c) (-elem c)\n                  (nil? c) nil\n                  (map? c) (throw \"Maps cannot be used as content\")\n                  (string? c) (gdom/createTextNode c)\n                  (vector? c) (elem-factory c)\n                  ;;TODO: there's a bug in clojurescript that prevents seqs from\n                  ;; being considered collections\n                  (seq? c) (as-content parent c)\n                  (bind/binding-coll? c) (do (capture-binding :coll c) (as-content parent [(bind/value c)]))\n                  (bind/binding? c) (do (capture-binding :text c) (as-content parent [(bind/value c)]))\n                  (.-nodeName c) c\n                  (.-get c) (.get c 0)\n                  :else (gdom/createTextNode (str c)))]\n      (when child\n        (gdom/appendChild parent child)))))\n\n(defmulti dom-binding (fn [type _ _] type))\n(defmethod dom-binding :text [_ b elem]\n  (bind/on-change b (fn [v]\n                      (gdom/removeChildren elem)\n                      (as-content elem [v]))))\n\n(defmethod dom-binding :attr [_ [k b] elem]\n  (bind/on-change b (fn [v]\n                      (dom-attr elem k v))))\n\n(defmethod dom-binding :style [_ [k b] elem]\n  (bind/on-change b (fn [v]\n                      (if k\n                        (dom-style elem k v)\n                        (dom-style elem v)))))\n\n(defn dom-add [bc parent elem v]\n  (if-let [adder (bind/opt bc :add)]\n    (adder parent elem v)\n    (gdom/appendChild parent elem)))\n\n(defn dom-remove [bc elem]\n  (if-let [remover (bind/opt bc :remove)]\n    (remover elem)\n    (gdom/removeNode elem)))\n\n(defmethod dom-binding :coll [_ bc parent]\n  (bind/on-change bc (fn [type elem v]\n                       (condp = type\n                         :add (dom-add bc parent elem v)\n                         :remove (dom-remove bc elem)))))\n\n(defn handle-bindings [bs elem]\n  (doseq [[type b] bs]\n    (dom-binding type b elem)))\n\n;; ********************************************\n;; element handling\n;; ********************************************\n\n(defn dom-style\n  ([elem v]\n   (cond\n     (string? v) (. elem (setAttribute \"style\" v))\n     (map? v) (doseq [[k v] v]\n                (dom-style elem k v))\n     (bind/binding? v) (do\n                         (capture-binding :style [nil v])\n                         (dom-style elem (bind/value v))))\n   elem)\n  ([elem k v]\n   (let [v (if (bind/binding? v)\n             (do\n               (capture-binding :style [k v])\n               (bind/value v))\n             v)]\n     (gstyle/setStyle elem (name k) v))))\n\n(defn dom-attr\n  ([elem attrs]\n   (when elem\n     (if-not (map? attrs)\n       (. elem (getAttribute (name attrs)))\n       (do\n         (doseq [[k v] attrs]\n           (dom-attr elem k v))\n         elem))))\n  ([elem k v]\n   (if (= k :style)\n     (dom-style elem v)\n     (let [v (if (bind/binding? v)\n               (do\n                 (capture-binding :attr [k v])\n                 (bind/value v))\n               v)]\n       (. elem (setAttribute (name k) v))))\n   elem))\n\n;; From Weavejester's Hiccup: https://github.com/weavejester/hiccup/blob/master/src/hiccup/core.clj#L57\n(def ^{:doc \"Regular expression that parses a CSS-style id and class from a tag name.\" :private true}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(defn- normalize-map-attrs [map-attrs]\n  (into {} (map (fn [[n v]] (if (true? v) [n (name n)] [n v]))\n                (filter (comp boolean second)\n                        map-attrs))))\n\n(defn- normalize-element\n  \"Ensure a tag vector is of the form [tag-name attrs content].\"\n  [[tag & content]]\n  (when (not (or (keyword? tag) (symbol? tag) (string? tag)))\n    (throw (str tag \" is not a valid tag name.\")))\n  (let [[_ tag id class] (re-matches re-tag (name tag))\n        [nsp tag]     (let [[nsp t] (string/split tag #\":\")\n                               ns-xmlns (xmlns (keyword nsp))]\n                           (if t\n                             [(or ns-xmlns nsp) t]\n                             [(:xhtml xmlns) nsp]))\n        tag-attrs        (into {}\n                               (filter #(not (nil? (second %)))\n                                       {:id (or id nil)\n                                        :class (if class (string/replace class #\"\\.\" \" \"))}))\n        map-attrs        (first content)]\n    (if (map? map-attrs)\n      [nsp tag (merge tag-attrs (normalize-map-attrs map-attrs)) (next content)]\n      [nsp tag tag-attrs content])))\n\n(defn parse-content [elem content]\n  (let [attrs (first content)]\n  (if (map? attrs)\n    (do\n      (dom-attr elem attrs)\n      (rest content))\n    content)))\n\n(def create-elem (if (.-createElementNS js/document)\n                   (fn [nsp tag]\n                     (.createElementNS js/document nsp tag))\n                   (fn [_ tag]\n                     (.createElement js/document tag))))\n\n(defn elem-factory [tag-def]\n  (binding [bindings (atom [])]\n    (let [[nsp tag attrs content] (normalize-element tag-def)\n          elem (create-elem nsp tag)]\n      (dom-attr elem attrs)\n      (as-content elem content)\n      (handle-bindings @bindings elem)\n      elem)))\n\n(defn add-optional-attrs\n  \"Add an optional attribute argument to a function that returns a vector tag.\"\n  [func]\n  (fn [& args]\n    (if (map? (first args))\n      (let [[tag & body] (apply func (rest args))]\n        (if (map? (first body))\n          (apply vector tag (merge (first body) (first args)) (rest body))\n          (apply vector tag (first args) body)))\n      (apply func args))))\n"]}